#include <stdlib.h>
#include <stdio.h>
#include "firstlight.h"

namespace flt
{


//////////////////////////////////////////////////////////////////////////

struct FileStream::Impl
{
	Impl() :
file(0),
m_iPos(0)
{}
int m_iPos;
FILE* file;
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

FileStream::FileStream() :
Stream(),m_fileName("_unloaded_"),m_size(0)
{
	m_this = new Impl;
}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

FileStream::FileStream(const char* filename, int openMode) :
Stream()
{
	m_this = new Impl;

	bool result = Open(filename, openMode);

	//FLT_ASSERT(result);				
}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

FileStream::~FileStream()
{
	Close();

	delete m_this;
	m_this = NULL;
}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

bool FileStream::Open(const char* filename, int openMode)
{
	stringc mode;

	//openMode = openMode & (~io::iPhoneUserData);

	//http://www.cplusplus.com/ref/cstdio/fopen.html
	//first char can be r, w, a
	//There can be up to three more optional mode characters:
	//    (1) A single '+' character,
	//    (2) One of 't' and 'b' and
	//    (3) One of 'c' and 'n'.

	if((openMode & io::in) == openMode)
		mode = "rb";
	else if((openMode & io::out) == openMode)
		mode = "r+b"; //To be consistant with the brew api.
	else if((openMode & io::app) == openMode)
		mode = "ab";
	else if((openMode & (io::in | io::out)) == openMode)
		mode = "r+b";
	else if((openMode & (io::out | io::app)) == openMode)
		mode = "ab";
	else if(openMode & io::trunc)
		mode = "wb+";
	else if (openMode & io::create)
		mode = "wb+";
	else
		FLT_ASSERT(false); //unsupported combination of io flags

	m_this->file = fopen(filename, mode.c_str());

	m_isOpen = m_this->file != 0;

	m_fileName = filename;

	if(m_isOpen)
	{
		int offset = Tell();
		Seek(0, io::end);
		m_size = Tell();
		Seek(offset, io::beg);
	}

	//printf("trying to open the file m_isOpen = %d filename = %s \n", m_isOpen, name);
	return m_isOpen;
}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

void FileStream::Close()
{
	if(m_this->file != 0)
	{
		fclose(m_this->file);
		m_this->file = 0;
	}

	m_isOpen = false;
}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

int FileStream::Read(void* buffer, int size)
{
	FLT_ASSERT(m_this->file);
	return (int)fread(buffer, 1, size, m_this->file);
}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

int FileStream::Write(const void* buffer, int size)
{
	FLT_ASSERT(m_this->file);

	return (int)fwrite(buffer, 1, size, m_this->file);
}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

void FileStream::Seek(int offset, int origin)
{
	FLT_ASSERT(m_this->file);

	fseek(m_this->file, offset, origin);
}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

int FileStream::Tell() const
{
	FLT_ASSERT(m_this->file);

	return ftell(m_this->file);
}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

bool FileStream::Exist(const char* filename)
{
	FileStream fileStream;

	if (fileStream.Open(filename, io::in))
	{
		fileStream.Close();
		return true;
	}

	return false;
}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

bool FileStream::Delete(const char* filename)
{
	char path[260];
	sprintf(path, "./%s", filename);
	return remove(path) == 0;	
}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

bool FileStream::Create(const char* filename)
{
	//Create the new file
	if (!Open( filename, io::create ))
	{
		//File system is probably full.
		return false;
	}
	Close();

	return true;
}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

int FileStream::Size() 
{	
	return m_size;
}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

bool FileStream::IsValid()
{
	return (m_this->file != 0);
}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

FILE* FileStream::GetRawFile()
{
	return m_this->file;
}

}