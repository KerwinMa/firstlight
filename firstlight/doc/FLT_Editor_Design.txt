FLT编辑器总体设计思路
（比较粗的想法，可能某些点上难以实现）

1）架构
编辑器是对不同数据的编辑，是以数据为中心的，所有的编辑器（编辑模块）都标示为支持不同的数据类型。
MVC: 每个编辑模块由文档（Model)+表现层(View)+数据/可视化交互编辑(Controller)功能构成。其中表现层可以是0~n（数据编辑同时也是数据表示），数据编辑一般是必选的，可视化编辑可以没有。
Command模式：对文档的编辑需要封装成command,以支持undo/redo。
Listener: 文档中的不同数据块之间如有依赖关系，需注册listener来通知相应的view的更新。（进一步，对于集成在一起的模块，需要通知相关文档的view的更新）
模块组合：每种形成独立文档（xml文件）的数据有一个独立的编辑器，几种相关类型的文档的编辑可集成到一个IDE中。比如2D编辑器，最底层是sprite编辑器，上层是时间轴动画编辑器等，再上层可能有背景编辑器。
(数据可以存在于独立的xml中，也可以在一个集中的xml中，类似于DAE的library)


2）通用的xml编辑器：
接上面说的Model+View,xml编辑器本身就是Model+数据View。没有可视化编辑功能。
xml作为FLT各种编辑器通用的数据格式，xml编辑器作为数据持久化和二进制转换以及二进制读取代码自动生成的一个工具模块。
是各类编辑器的基础。理论上，只靠xml编辑器可以完成所有数据的“非可视化”编辑。xml编辑模块，加上针对不同数据的表现层（引擎绘制）和可视化编辑模块，就构成了不同的编辑器。

xml编辑器可作为一个通用的编辑器独立存在，他设计了一种自解释的xml文件结构，即xml中定义结构(struct),包括各种成员数据的类型，常量定义和导入（.h文件）。xml编辑器提供对于结构的编辑（支持下拉列表，各种选取对话框），提供转换到二进制的功能，并生成c++的结构定义和二进制读取代码。其中难点是结构的嵌套。还有相互引用也比较麻烦，如果是基于ID的引用，可能要预先生成ID，可考虑基于字符串的引用。
xml编辑器作为其他编辑器的一个模块，即文档+数据编辑，可能想公用也比较难。（再仔细想想）

3) 2D编辑器：
首先，所谓2D指习惯上的屏幕坐标系下的2D，符合传统2D游戏的制作习惯。（不是去除z轴的笛卡尔坐标系2D,真要那样，直接3D好了，sprite应该支持3D空间坐标）
想支持的元素有：
sprite动画：基于模块组合的可插值的帧（时间轴动画），具体怎么结合还没想好，另外还有材质的编辑
UI动画：可能在CEGUI的基础上修改，支持时间轴关键帧插值动画
基于Actor的cinematic过场动画：也是时间轴动画，也许能统一处理
地图背景编辑：就是各种动画/静态画面/tile画面的分层组合，每层都是独立的，可放置各种2D元素。
World编辑（摆放actor和actor属性编辑，触发器等）：有了背景编辑，加上基于actor的操作，支持group
事件脚本编辑:用于world编辑器中，触发器的事件响应，和游戏直接相关。需要脚本支持，便于根据游戏扩展。其实World编辑器本身就要能根据游戏扩展。

待续。。。

（3D部分暂时不考虑）

